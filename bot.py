import asyncio
import logging
from datetime import datetime, timedelta
import pytz
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, 
    ContextTypes, ConversationHandler, CallbackQueryHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import json
import os
pid = os.getpid()
print(pid)



def save_plans_to_json(filename='plans.json'):
    logging.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –≤ —Ñ–∞–π–ª.")
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–ª–∞–Ω—ã –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        serializable_plans = {
            user_id: [
                {
                    'date': plan['date'].strftime('%Y-%m-%d'),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É
                    'title': plan['title'],
                    'time': plan['time'].strftime('%H:%M') if plan['time'] else None
                }
                for plan in user_plans
            ]
            for user_id, user_plans in plans.items()
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(serializable_plans, f, ensure_ascii=False, indent=4)
        logging.info("–ü–ª–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        print("–ü–ª–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤: {e}")

def load_plans_from_json(filename='plans.json'):
    global plans
    try:
        logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.")
        with open(filename, 'r', encoding='utf-8') as f:
            loaded_plans = json.load(f)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            plans = {
                int(user_id): [
                    {
                        'date': datetime.strptime(plan['date'], '%Y-%m-%d').date(),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ date
                        'title': plan['title'],
                        'time': datetime.strptime(plan['time'], '%H:%M').time() if plan['time'] else None
                    }
                    for plan in user_plans
                ]
                for user_id, user_plans in loaded_plans.items()
            }
        logging.info("–ü–ª–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except FileNotFoundError:
        logging.warning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.")
        plans = {}
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON. –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        plans = {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≤: {e}")
        
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
scheduler = AsyncIOScheduler()
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = "7690640025:AAH0FmVZk1yJyYren7ipYDL22XRK6bczaEA"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
LOCAL_TZ = pytz.timezone('Europe/Moscow')
plans = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
CHOOSE_DATE, ENTER_PLAN, ENTER_TIME = range(3)

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω"), KeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã")],
        [KeyboardButton("üìÖ –ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def delete_plan_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞:',
        reply_markup=get_date_keyboard()
    )
    return CHOOSE_DATE

async def delete_plan_for_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    try:
        selected_date = datetime.strptime(query.data, "%d.%m.%Y").date()
        user_id = update.effective_user.id
        
        user_plans = [
            plan for plan in plans.get(user_id, []) 
            if plan['date'] == selected_date
        ]

        if user_plans:
            plans_text = f"üåü –ü–ª–∞–Ω—ã –Ω–∞ {selected_date.strftime('%d.%m.%Y')}:\n\n"
            for idx, plan in enumerate(user_plans, start=1):
                time_str = plan['time'].strftime('%H:%M') if plan['time'] else '–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏'
                plans_text += f"{idx}. {plan['title']} ({time_str})\n"
            
            await query.message.reply_text(
                plans_text + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—Å–µ' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤.",
                reply_markup=get_main_keyboard()
            )
            context.user_data['selected_date'] = selected_date
            return ENTER_PLAN  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ENTER_PLAN –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
        else:
            await query.message.reply_text(
                f"–ù–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", 
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END
    
    except ValueError:
        await query.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_date_keyboard()
        )
        return CHOOSE_DATE

async def process_delete_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    selected_date = context.user_data.get('selected_date')

    if update.message.text.lower() == '–≤—Å–µ':
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        plans[user_id] = [plan for plan in plans.get(user_id, []) if plan['date'] != selected_date]
        await update.message.reply_text(f"–í—Å–µ –ø–ª–∞–Ω—ã –Ω–∞ {selected_date.strftime('%d.%m.%Y')} —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
    else:
        try:
            plan_index = int(update.message.text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            user_plans = plans.get(user_id, [])
            selected_plans = [plan for plan in user_plans if plan['date'] == selected_date]

            if 1 <= plan_index <= len(selected_plans):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö
                # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
                plan_to_delete = selected_plans[plan_index - 1]
                user_plans.remove(plan_to_delete)  # –£–¥–∞–ª—è–µ–º –ø–ª–∞–Ω –∏–∑ user_plans
                await update.message.reply_text(f"–ü–ª–∞–Ω '{plan_to_delete['title']}' —É–¥–∞–ª–µ–Ω.", reply_markup=get_main_keyboard())
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
        except (ValueError, IndexError):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞–Ω–∞ –∏–ª–∏ '–≤—Å–µ'.", reply_markup=get_main_keyboard())

    save_plans_to_json()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    return ConversationHandler.END


def get_date_keyboard():
    today = datetime.now(LOCAL_TZ).date()
    keyboard = [
        [InlineKeyboardButton(f"{today.strftime('%d.%m.%Y')}", callback_data=today.strftime("%d.%m.%Y"))],
        [InlineKeyboardButton(f"{(today + timedelta(days=1)).strftime('%d.%m.%Y')}", 
                               callback_data=(today + timedelta(days=1)).strftime("%d.%m.%Y"))],
        [InlineKeyboardButton(f"{(today + timedelta(days=2)).strftime('%d.%m.%Y')}", 
                               callback_data=(today + timedelta(days=2)).strftime("%d.%m.%Y"))],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data="custom_date")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        'üíÉ–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_main_keyboard()
    )

async def add_plan_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–ª–∞–Ω–∞:',
        reply_markup=get_date_keyboard()
    )
    return CHOOSE_DATE

async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "custom_date":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return CHOOSE_DATE  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞

    try:
        selected_date = datetime.strptime(query.data, "%d.%m.%Y").date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if selected_date < datetime.now(LOCAL_TZ).date():
            await query.message.reply_text(
                "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É.",
                reply_markup=get_date_keyboard()
            )
            return CHOOSE_DATE

        context.user_data['selected_date'] = selected_date
        await query.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞:"
        )
        return ENTER_PLAN
    except ValueError:
        await query.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_date_keyboard()
        )
        return CHOOSE_DATE
    
async def process_custom_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    try:
        selected_date = datetime.strptime(update.message.text, "%d.%m.%Y").date()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É
        if selected_date < datetime.now(LOCAL_TZ).date():
            await update.message.reply_text(
                "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É.",
                reply_markup=get_date_keyboard()
            )
            return CHOOSE_DATE

        context.user_data['selected_date'] = selected_date
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞:"
        )
        return ENTER_PLAN
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_date_keyboard()
        )
        return CHOOSE_DATE
    
async def enter_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    plan_title = update.message.text
    context.user_data['plan_title'] = plan_title

    keyboard = [
        [InlineKeyboardButton("üïí –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data="add_time")],
        [InlineKeyboardButton("‚ùå –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏", callback_data="no_time")]
    ]
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –∫ –ø–ª–∞–Ω—É?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ENTER_TIME

async def enter_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "no_time":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        user_id = update.effective_user.id
        selected_date = context.user_data['selected_date']
        plan_title = context.user_data['plan_title']

        if user_id not in plans:
            plans[user_id] = []

        plans[user_id].append({
            'date': selected_date,
            'title': plan_title,
            'time': None
        })

        await query.message.reply_text(
            f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
            f"–î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
            f"–ó–∞–¥–∞—á–∞: {plan_title}",
            reply_markup=get_main_keyboard()
        )
        save_plans_to_json()
        return ConversationHandler.END

    elif query.data == "add_time":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        return ENTER_TIME

async def process_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        time_str = update.message.text
        time_obj = datetime.strptime(time_str, "%H:%M").time()
        
        user_id = update.effective_user.id
        selected_date = context.user_data['selected_date']
        plan_title = context.user_data['plan_title']

        # –°–æ–∑–¥–∞–µ–º "offset-aware" datetime
        selected_datetime = LOCAL_TZ.localize(datetime.combine(selected_date, time_obj))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if selected_datetime < datetime.now(LOCAL_TZ):
            await update.message.reply_text(
                "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END

        if user_id not in plans:
            plans[user_id] = []

        plans[user_id].append({
            'date': selected_date,
            'title': plan_title,
            'time': time_obj
        })

        await update.message.reply_text(
            f"–ü–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"–î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
            f"–í—Ä–µ–º—è: {time_obj.strftime('%H:%M')}\n"
            f"–ó–∞–¥–∞—á–∞: {plan_title}",
            reply_markup=get_main_keyboard()
        )
        save_plans_to_json()
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

async def show_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–æ–≤:',
        reply_markup=get_date_keyboard()
    )
    return CHOOSE_DATE

async def show_plans_for_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    try:
        selected_date = datetime.strptime(query.data, "%d.%m.%Y").date()
        user_id = update.effective_user.id
        
        user_plans = [
            plan for plan in plans.get(user_id, []) 
            if plan['date'] == selected_date
        ]

        if user_plans:
            plans_text = f"–ü–ª–∞–Ω—ã –Ω–∞ {selected_date.strftime('%d.%m.%Y')}:\n\n"
            for plan in sorted(user_plans, key=lambda x: x['time'] or datetime.min.time()):
                time_str = plan['time'].strftime('%H:%M') if plan['time'] else '–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏'
                plans_text += f"‚Ä¢ {plan['title']} ({time_str})\n"
            
            await query.message.reply_text(
                plans_text, 
                reply_markup=get_main_keyboard()
            )
        else:
            await query.message.reply_text(
                f"üèñ –ù–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", 
                reply_markup=get_main_keyboard()
            )
        return ConversationHandler.END
    
    except ValueError:
        if query.data == "custom_date":
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return CHOOSE_DATE
        
        await query.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_date_keyboard()
        )
        return CHOOSE_DATE

async def show_today_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    today = datetime.now(LOCAL_TZ).date()
    user_id = update.effective_user.id
    
    user_plans = [
        plan for plan in plans.get(user_id, []) 
        if plan['date'] == today
    ]

    if user_plans:
        plans_text = f"üåü –ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):\n\n"
        for plan in sorted(user_plans, key=lambda x: x['time'] or datetime.min.time()):
            time_str = plan['time'].strftime('%H:%M') if plan['time'] else '–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏'
            plans_text += f"‚Ä¢ {plan['title']} ({time_str})\n"
        
        await update.message.reply_text(
            plans_text, 
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "üèñ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", 
            reply_markup=get_main_keyboard()
        )

async def daily_plan_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        today = datetime.now(LOCAL_TZ).date()
        
        for user_id, user_plans in plans.items():
            today_plans = [
                plan for plan in user_plans 
                if plan['date'] == today
            ]
            
            if today_plans:
                plans_text = f"üåü –í–∞—à–∏ –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):\n\n"
                for plan in sorted(today_plans, key=lambda x: x['time'] or datetime.min.time()):
                    time_str = plan['time'].strftime('%H:%M') if plan['time'] else '–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏'
                    plans_text += f"‚Ä¢ {plan['title']} ({time_str})\n"
                
                try:
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {plans_text}")  # Log the message being sent
                    await context.bot.send_message(
                        chat_id=user_id, 
                        text=plans_text
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ daily_plan_reminder: {e}")

async def plan_reminders(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        now = datetime.now(LOCAL_TZ)
        
        for user_id, user_plans in plans.items():
            for plan in user_plans:
                if plan['time'] and plan['date'] == now.date():
                    plan_time = LOCAL_TZ.localize(datetime.combine(plan['date'], plan['time']))  # –°–¥–µ–ª–∞–µ–º plan_time "offset-aware"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –ø–ª–∞–Ω–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö 50 —Å–µ–∫—É–Ω–¥
                    if (plan_time - now).total_seconds() <= 50 and (plan_time - now).total_seconds() > 0:
                        try:
                            await context.bot.send_message(
                                chat_id=user_id, 
                                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–ü–ª–∞–Ω: {plan['title']}\n–í—Ä–µ–º—è: {plan['time'].strftime('%H:%M')}"
                            )
                        except Exception as e:
                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ plan_reminders: {e}")

# Function to add a reminder
async def add_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú> <—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è>")
        return

    reminder_time = context.args[0]  # –û–∂–∏–¥–∞–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
    reminder_text = ' '.join(context.args[1:])  # –û—Å—Ç–∞–ª—å–Ω–æ–µ - —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç datetime
        reminder_datetime = datetime.strptime(reminder_time, "%H:%M").replace(tzinfo=pytz.timezone('Europe/Moscow'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if reminder_datetime < datetime.now(pytz.timezone('Europe/Moscow')):
            await update.message.reply_text("–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.")
            return

        # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        scheduler.add_job(send_reminder, 'date', run_date=reminder_datetime, args=[context, user_id, reminder_text])
        await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time}.")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú.")


# Function to send the reminder
async def send_reminder(context: ContextTypes.DEFAULT_TYPE, user_id, reminder_text):
    await context.bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}")   

def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    load_plans_from_json()
    application = ApplicationBuilder().token(TOKEN).build()
    delete_plan_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚ùå –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω$'), delete_plan_start)],
        states={
            CHOOSE_DATE: [CallbackQueryHandler(delete_plan_for_date)],
            ENTER_PLAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_delete_plan)]
        },
        fallbacks=[CommandHandler('cancel', start)]
    )
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    add_plan_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω$'), add_plan_start)],
        states={
            CHOOSE_DATE: [CallbackQueryHandler(choose_date)],
            ENTER_PLAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_plan)],
            ENTER_TIME: [
                CallbackQueryHandler(enter_time),
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_time)
            ]
        },
        fallbacks=[CommandHandler('cancel', start)]
    )

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–æ–≤
    show_plans_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã$'), show_plans),
            MessageHandler(filters.Regex('^–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É$'), show_plans)
        ],
        states={
            CHOOSE_DATE: [CallbackQueryHandler(show_plans_for_date)]
        },
        fallbacks=[CommandHandler('cancel', start)]
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(add_plan_handler)
    application.add_handler(show_plans_handler)
    application.add_handler(delete_plan_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
    application.add_handler(MessageHandler(filters.Regex('^üìÖ –ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è$'), show_today_plans))


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ job_queue –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∂–æ–±–æ–≤
    
    # –í —Ñ—É–Ω–∫—Ü–∏–∏ main() –∏–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ 3:00

    if hasattr(application, 'job_queue') and application.job_queue is not None:
    # –î–æ–±–∞–≤–ª—è–µ–º job –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        application.job_queue.run_daily(
            daily_plan_reminder, 
            time=datetime.now(LOCAL_TZ).replace(hour=3, minute=10, second=0, microsecond=0).time()
        )
    save_plans_to_json()
    # –î–æ–±–∞–≤–ª—è–µ–º job –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö
    application.job_queue.run_repeating(plan_reminders, interval=60)
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)

def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        asyncio.run(start_bot())
    except KeyboardInterrupt:
        logging.info("Bot stopped by user")
    except Exception as e:
        logging.error(f"Async bot error: {e}", exc_info=True)
    finally:
        save_plans_to_json()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã

async def start_bot():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        load_plans_from_json()
        application = ApplicationBuilder().token(TOKEN).build()
         # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
        delete_plan_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^‚ùå –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω$'), delete_plan_start)],
            states={
                CHOOSE_DATE: [
                    CallbackQueryHandler(delete_plan_for_date),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_custom_date)  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                ],
                ENTER_PLAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_delete_plan)]
            },
            fallbacks=[CommandHandler('cancel', start)]
        )
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Ç–µ –∂–µ, —á—Ç–æ –∏ –≤ main())
        add_plan_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω$'), add_plan_start)],
            states={
                CHOOSE_DATE: [
                    CallbackQueryHandler(choose_date),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_custom_date)  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                ],
                ENTER_PLAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_plan)],
                ENTER_TIME: [
                    CallbackQueryHandler(enter_time),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_time)
                ]
            },
            fallbacks=[CommandHandler('cancel', start)]
        )

        show_plans_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex('^üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã$'), show_plans),
                MessageHandler(filters.Regex('^–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É$'), show_plans)
            ],
            states={
                CHOOSE_DATE: [CallbackQueryHandler(show_plans_for_date)]
            },
            fallbacks=[CommandHandler('cancel', start)]
        )

        application.add_handler(CommandHandler("start", start))
        application.add_handler(add_plan_handler)
        application.add_handler(show_plans_handler)
        application.add_handler(delete_plan_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
        application.add_handler(MessageHandler(filters.Regex('^üìÖ –ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è$'), show_today_plans))


        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ job_queue –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∂–æ–±–æ–≤
        if hasattr(application, 'job_queue') and application.job_queue is not None:
            # –î–æ–±–∞–≤–ª—è–µ–º job –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            application.job_queue.run_daily(
                daily_plan_reminder, 
                time=datetime.now(LOCAL_TZ).replace(hour=3, minute=10, second=0, microsecond=0).time()
            )

            # –î–æ–±–∞–≤–ª—è–µ–º job –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö
            application.job_queue.run_repeating(plan_reminders, interval=60)
        else:
            logging.warning("Job queue is not available. Scheduled jobs will not run.")
        save_plans_to_json()
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await application.initialize()
        await application.start()
        await application.updater.start_polling(drop_pending_updates=True)
        
        # –†–∞–±–æ—Ç–∞–µ–º, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await asyncio.get_event_loop().create_future()
    
    except Exception as e:
        logging.error(f"Error in start_bot: {e}", exc_info=True)

def run_async_bot():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        asyncio.run(start_bot())
    except KeyboardInterrupt:
        logging.info("Bot stopped by user")
    except Exception as e:
        logging.error(f"Async bot error: {e}", exc_info=True)
    finally:
        save_plans_to_json()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã

if __name__ == '__main__':
    try:
        run_async_bot()
    except KeyboardInterrupt:
        print("Bot stopped")
    finally:
        save_plans_to_json()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã